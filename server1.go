package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"strconv"
	"strings"

	"github.com/gorilla/mux"
)

type AutoGenerated struct {
	Rajaongkir Rajaongkir `json:"rajaongkir"`
}
type Query struct {
	Origin      string `json:"origin"`
	Destination string `json:"destination"`
	Weight      int    `json:"weight"`
	Courier     string `json:"courier"`
}
type Status struct {
	Code        int    `json:"code"`
	Description string `json:"description"`
}
type OriginDetails struct {
	CityID     string `json:"city_id"`
	ProvinceID string `json:"province_id"`
	Province   string `json:"province"`
	Type       string `json:"type"`
	CityName   string `json:"city_name"`
	PostalCode string `json:"postal_code"`
}
type DestinationDetails struct {
	CityID     string `json:"city_id"`
	ProvinceID string `json:"province_id"`
	Province   string `json:"province"`
	Type       string `json:"type"`
	CityName   string `json:"city_name"`
	PostalCode string `json:"postal_code"`
}
type Cost struct {
	Value int    `json:"value"`
	Etd   string `json:"etd"`
	Note  string `json:"note"`
}
type Costs struct {
	Service     string `json:"service"`
	Description string `json:"description"`
	Cost        []Cost `json:"cost"`
}
type Results struct {
	Code  string  `json:"code"`
	Name  string  `json:"name"`
	Costs []Costs `json:"costs"`
}
type Rajaongkir struct {
	Query              Query              `json:"query"`
	Status             Status             `json:"status"`
	OriginDetails      OriginDetails      `json:"origin_details"`
	DestinationDetails DestinationDetails `json:"destination_details"`
	Results            []Results          `json:"results"`
}

type Ongkir struct {
	Deployed           string
	Status             string
	OriginDetails      string
	DestinationDetails string
	Weight             string
	Results            []Results
}

func getAPI() (string, string, string, string, []Results) {
	api_key := "180cae424ec633307110af92004ddcd9"
	url := "https://api.rajaongkir.com/starter/cost"
	payload := strings.NewReader("origin=501&destination=114&weight=1700&courier=jne")
	req, _ := http.NewRequest("POST", url, payload)
	req.Header.Add("key", api_key)
	req.Header.Add("content-type", "application/x-www-form-urlencoded")
	res, _ := http.DefaultClient.Do(req)
	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	var ag AutoGenerated
	json.Unmarshal(body, &ag)
	var status = ag.Rajaongkir.Status.Description
	var origin = ag.Rajaongkir.OriginDetails.CityName
	var destination = ag.Rajaongkir.DestinationDetails.CityName
	var weight = strconv.Itoa(ag.Rajaongkir.Query.Weight)
	var biaya = ag.Rajaongkir.Results
	return status, origin, destination, weight, biaya
}

func getOngkir(w http.ResponseWriter, r *http.Request) {
	s := []byte(`{"deployed":"Ghiffari}`)
	var ongkir Ongkir

	err := json.Unmarshal(s, &ongkir)
	if err != {
		panic(err)
	}
	status, origin, destination, weight, biaya := getAPI()

	fmt.Println(status)
	fmt.Println(origin)
	fmt.Println(destination)
	fmt.Println(weight)
	fmt.Println(biaya)

	ongkir.Deployed = s
	ongkir.Status = status
	ongkir.OriginDetails = origin
	ongkir.DestinationDetails = destination
	ongkir.Weight = weight
	ongkir.Results = biaya
	json.NewEncoder(w).Encode(ongkir)
}

func main() {
	router := mux.NewRouter()
	router.HandleFunc("/getOngkir", getOngkir).Methods("GET")
	http.Handle("/", router)
	log.Fatal(http.ListenAndServe(":4321", router))
}
